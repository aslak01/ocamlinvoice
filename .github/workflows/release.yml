name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: 4.14.x
          dune-cache: true

      - name: Install OCaml dependencies
        run: opam install -y camlpdf yojson sqlite3 dune alcotest

      - name: Run OCaml tests
        working-directory: ./tauri-gui/ocaml-backend
        run: |
          eval $(opam env)
          dune runtest

  release:
    needs: test
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: ''
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: 4.14.x
          dune-cache: true

      - name: Install OCaml dependencies
        run: opam install -y camlpdf yojson sqlite3 dune

      - name: Build OCaml backend
        working-directory: ./tauri-gui/ocaml-backend
        run: |
          eval $(opam env)
          dune build

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './tauri-gui/src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: './tauri-gui/package-lock.json'

      - name: Install frontend dependencies
        working-directory: ./tauri-gui
        run: npm ci

      - name: Build the app
        working-directory: ./tauri-gui
        run: npm run tauri build -- ${{ matrix.args }}

      - name: Ad-hoc sign macOS app (free)
        if: matrix.platform == 'macos-latest'
        run: |
          find tauri-gui/src-tauri/target/release/bundle -name "*.app" -exec codesign --force --deep --sign - {} \;

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            tauri-gui/src-tauri/target/release/bundle/dmg/*.dmg
            tauri-gui/src-tauri/target/release/bundle/deb/*.deb
            tauri-gui/src-tauri/target/release/bundle/appimage/*.AppImage
            tauri-gui/src-tauri/target/release/bundle/msi/*.msi
            tauri-gui/src-tauri/target/release/bundle/nsis/*.exe
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}