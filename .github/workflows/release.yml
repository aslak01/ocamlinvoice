name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: 5.2.x
          dune-cache: false

      - name: Install OCaml dependencies
        run: opam install -y camlpdf yojson sqlite3 dune alcotest

      - name: Run OCaml tests
        working-directory: ./tauri-gui/ocaml-backend
        run: |
          eval $(opam env)
          dune runtest

  release:
    needs: test
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: ""
          - platform: "ubuntu-latest"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf

      - name: Setup OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: 5.2.x
          dune-cache: false

      - name: Install OCaml dependencies (Unix)
        if: runner.os != 'Windows'
        run: |
          for i in {1..3}; do
            opam install -y camlpdf yojson sqlite3 dune alcotest && break
            echo "Attempt $i failed, retrying..."
            sleep 10
          done
        env:
          CC: gcc

      - name: Install OCaml dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          # Set up environment to avoid async handle issues
          $env:DUNE_CACHE_STORAGE_MODE = "disabled"
          $env:DUNE_CACHE_TRANSPORT = "disabled"
          
          for ($i = 1; $i -le 3; $i++) {
            opam install -y camlpdf yojson sqlite3 dune alcotest
            if ($LASTEXITCODE -eq 0) { break }
            Write-Host "Attempt $i failed, retrying..."
            Start-Sleep -Seconds 10
          }
        shell: pwsh
        env:
          CC: gcc

      - name: Build OCaml backend (Unix)
        if: runner.os != 'Windows'
        working-directory: ./tauri-gui/ocaml-backend
        run: |
          eval $(opam env)
          dune build

      - name: Build OCaml backend (Windows)
        if: runner.os == 'Windows'
        working-directory: ./tauri-gui/ocaml-backend
        run: |
          # Disable dune cache to avoid async handle issues on Windows
          $env:DUNE_CACHE_STORAGE_MODE = "disabled"
          $env:DUNE_CACHE_TRANSPORT = "disabled"
          
          opam env | Invoke-Expression
          dune build
        shell: pwsh

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./tauri-gui/src-tauri -> target"

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"
          cache-dependency-path: "./tauri-gui/package-lock.json"

      - name: Install frontend dependencies
        working-directory: ./tauri-gui
        run: npm ci

      - name: Build the app
        working-directory: ./tauri-gui
        run: npm run tauri build -- ${{ matrix.args }}

      - name: Ad-hoc sign macOS app (free)
        if: matrix.platform == 'macos-latest'
        run: |
          find tauri-gui/src-tauri/target/release/bundle -name "*.app" -exec codesign --force --deep --sign - {} \;

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            tauri-gui/src-tauri/target/release/bundle/dmg/*.dmg
            tauri-gui/src-tauri/target/release/bundle/deb/*.deb
            tauri-gui/src-tauri/target/release/bundle/appimage/*.AppImage
            tauri-gui/src-tauri/target/release/bundle/msi/*.msi
            tauri-gui/src-tauri/target/release/bundle/nsis/*.exe
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup (Windows)
        if: runner.os == 'Windows' && always()
        run: |
          # Force cleanup to prevent UV_HANDLE_CLOSING assertion
          Write-Host "Performing cleanup..."
          if (Get-Process "dune" -ErrorAction SilentlyContinue) { 
            Stop-Process -Name "dune" -Force -ErrorAction SilentlyContinue
          }
          # Give time for processes to properly close
          Start-Sleep -Seconds 2
        shell: pwsh
